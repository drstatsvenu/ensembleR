str(training)
return(predictions)
}
}
p2<-ensemble(train,test,'Loan_Status',c('gbm','rpart','treebag'),c('gbm'))
a<-A:Z
a<-1:100
a
train$a[1]<-1
view(train)
veiw(train)
View(train)
train$a[2]<-1
View(train)
train$(a[2])<-1
train$as.numeric(a[2])<-1
train$a<-1
train$b<-1
str(train)
?assign
ensemble<-function(training,testing,outcomeName,BaseModels,TopModel,myControl = trainControl(method='cv',number=30,repeats=30,returnResamp='none'))
{
if(!is.matrix(training)){
library('caret')
predictors <- names(training)[!names(training) %in% outcomeName]
for(i in 1:length(BaseModels))
{
model <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
a <- predict(object=model, testing[,predictors])
testing <- cbind(testing,assign(paste(model_BaseModels[i],a,sep='_'),a))
b <- predict(object=model, training[,predictors])
training <- cbind(training,assign(paste(model_BaseModels[i],a,sep='_'),a))
}
predictors <- names(training)[!names(training) %in% outcomeName]
model <- train(training[,predictors], training[,outcomeName], method=TopModel, trControl=myControl)
predictions<-predict(object=model, testing[,predictors])
str(training)
return(predictions)
}
}
p2<-ensemble(train,test,'Loan_Status',c('gbm','rpart','treebag'),c('gbm'))
ensemble<-function(training,testing,outcomeName,BaseModels,TopModel,myControl = trainControl(method='cv',number=30,repeats=30,returnResamp='none'))
{
if(!is.matrix(training)){
library('caret')
predictors <- names(training)[!names(training) %in% outcomeName]
for(i in 1:length(BaseModels))
{
model <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
a <- predict(object=model, testing[,predictors])
testing <- cbind(testing,assign(paste(model_BaseModels[i],a,sep='_'),a))
b <- predict(object=model, training[,predictors])
training <- cbind(training,assign(paste(model_BaseModels[i],a,sep='_'),b))
}
predictors <- names(training)[!names(training) %in% outcomeName]
model <- train(training[,predictors], training[,outcomeName], method=TopModel, trControl=myControl)
predictions<-predict(object=model, testing[,predictors])
str(training)
return(predictions)
}
}
p2<-ensemble(train,test,'Loan_Status',c('gbm','rpart','treebag'),c('gbm'))
ensemble<-function(training,testing,outcomeName,BaseModels,TopModel,myControl = trainControl(method='cv',number=30,repeats=30,returnResamp='none'))
{
if(!is.matrix(training)){
library('caret')
predictors <- names(training)[!names(training) %in% outcomeName]
for(i in 1:length(BaseModels))
{
model <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
a <- predict(object=model, testing[,predictors])
testing <- cbind(testing,assign(paste('model',BaseModels[i],sep='_'),a))
b <- predict(object=model, training[,predictors])
training <- cbind(training,assign(paste('model',BaseModels[i],sep='_'),b))
}
predictors <- names(training)[!names(training) %in% outcomeName]
model <- train(training[,predictors], training[,outcomeName], method=TopModel, trControl=myControl)
predictions<-predict(object=model, testing[,predictors])
str(training)
return(predictions)
}
}
p2<-ensemble(train,test,'Loan_Status',c('gbm','rpart','treebag'),c('gbm'))
ensemble<-function(training,testing,outcomeName,BaseModels,TopModel,myControl = trainControl(method='cv',number=30,repeats=30,returnResamp='none'))
{
library('caret')
predictors <- names(training)[!names(training) %in% outcomeName]
for(i in 1:length(BaseModels))
{
if(i==1)
{
modela <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
testing$a <- predict(object=modela, testing[,predictors])
training$a <- predict(object=modela, training[,predictors])
}
if(i==2)
{
modelb <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
testing$b <- predict(object=modelb, testing[,predictors])
training$b <- predict(object=modelb, training[,predictors])
}
if(i==3)
{
modelc <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
testing$c <- predict(object=modelc, testing[,predictors])
training$c <- predict(object=modelc, training[,predictors])
}
}
predictors <- names(training)[!names(training) %in% outcomeName]
model <- train(training[,predictors], training[,outcomeName], method=TopModel, trControl=myControl)
predictions<-predict(object=model, testing[,predictors])
str(training)
return(predictions)
}
}
ensemble<-function(training,testing,outcomeName,BaseModels,TopModel,myControl = trainControl(method='cv',number=30,repeats=30,returnResamp='none'))
{
library('caret')
predictors <- names(training)[!names(training) %in% outcomeName]
for(i in 1:length(BaseModels))
{
if(i==1)
{
modela <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
testing$a <- predict(object=modela, testing[,predictors])
training$a <- predict(object=modela, training[,predictors])
}
if(i==2)
{
modelb <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
testing$b <- predict(object=modelb, testing[,predictors])
training$b <- predict(object=modelb, training[,predictors])
}
if(i==3)
{
modelc <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
testing$c <- predict(object=modelc, testing[,predictors])
training$c <- predict(object=modelc, training[,predictors])
}
}
predictors <- names(training)[!names(training) %in% outcomeName]
model <- train(training[,predictors], training[,outcomeName], method=TopModel, trControl=myControl)
predictions<-predict(object=model, testing[,predictors])
str(training)
return(predictions)
}
p2<-ensemble(train,test,'Loan_Status',c('gbm','rpart','treebag'),c('gbm'))
warnings()
length(a)
train$b<-NULL
train$a<-NULL
p2<-ensemble(train,test,'Loan_Status',c('gbm','rpart','treebag'),c('gbm'))
table(p1)
table(p2)
table(p3)
?cbind
ensemble<-function(training,testing,outcomeName,BaseModels,TopModel,myControl = trainControl(method='cv',number=30,repeats=30,returnResamp='none'))
{
library('caret')
predictors <- names(training)[!names(training) %in% outcomeName]
for(i in 1:length(BaseModels))
{
modela <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
a <- predict(object=modela, testing[,predictors])
testing <- cbind(testing,a,deparse.level = 1)
b <- predict(object=modela, training[,predictors])
training <- cbind(training,b,deparse.level = 1)
}
predictors <- names(training)[!names(training) %in% outcomeName]
model <- train(training[,predictors], training[,outcomeName], method=TopModel, trControl=myControl)
predictions<-predict(object=model, testing[,predictors])
str(training)
return(predictions)
}
p2<-ensemble(train,test,'Loan_Status',c('gbm','rpart','treebag'),c('gbm'))
ensemble<-function(training,testing,outcomeName,BaseModels,TopModel,myControl = trainControl(method='cv',number=30,repeats=30,returnResamp='none'))
{
library('caret')
predictors <- names(training)[!names(training) %in% outcomeName]
for(i in 1:length(BaseModels))
{
model <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
a <- predict(object=model, testing[,predictors])
testing <- cbind(testing,a,deparse.level = 1)
b <- predict(object=model, training[,predictors])
training <- cbind(training,b,deparse.level = 1)
}
predictors <- names(training)[!names(training) %in% outcomeName]
model <- train(training[,predictors], training[,outcomeName], method=TopModel, trControl=myControl)
predictions<-predict(object=model, testing[,predictors])
str(training)
return(predictions)
}
str(training)
str(train)
str(test)
p2<-ensemble(train,test,'Loan_Status',c('gbm','rpart','treebag'),c('gbm'))
ensemble<-function(training,testing,outcomeName,BaseModels,TopModel,myControl = trainControl(method='cv',number=30,repeats=30,returnResamp='none'))
{
library('caret')
predictors <- names(training)[!names(training) %in% outcomeName]
for(i in 1:length(BaseModels))
{
model <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
a <- predict(object=model, testing[,predictors])
testing <- cbind(testing,a,deparse.level = 0)
b <- predict(object=model, training[,predictors])
training <- cbind(training,b,deparse.level = 0)
}
predictors <- names(training)[!names(training) %in% outcomeName]
model_final <- train(training[,predictors], training[,outcomeName], method=TopModel, trControl=myControl)
predictions<-predict(object=model_final, testing[,predictors])
str(training)
return(predictions)
}
p2<-ensemble(train,test,'Loan_Status',c('gbm','rpart','treebag'),c('gbm'))
train<-read.csv("train.csv",stringsAsFactors = T)
test<-read.csv("test.csv",stringsAsFactors = T)
train$Loan_ID<-NULL
test$Loan_ID<-NULL
p2<-ensemble(train,test,'Loan_Status',c('gbm','rpart','treebag'),c('gbm'))
ensemble<-function(training,testing,outcomeName,BaseModels,TopModel,myControl = trainControl(method='cv',number=30,repeats=30,returnResamp='none'))
{
library('caret')
predictors <- names(training)[!names(training) %in% outcomeName]
for(i in 1:length(BaseModels))
{
model <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
a <- predict(object=model, testing[,predictors])
testing <- cbind(testing,a,deparse.level = 0)
b <- predict(object=model, training[,predictors])
training <- cbind(training,b,deparse.level = 0)
}
predictors <- names(training)[!names(training) %in% outcomeName]
model_final <- train(training[,predictors], training[,outcomeName], method=TopModel, trControl=myControl)
#predictions<-predict(object=model_final, testing[,predictors])
str(training)
return(predictions)
}
p2<-ensemble(train,test,'Loan_Status',c('gbm','rpart','treebag'),c('gbm'))
ensemble<-function(training,testing,outcomeName,BaseModels,TopModel,myControl = trainControl(method='cv',number=30,repeats=30,returnResamp='none'))
{
library('caret')
predictors <- names(training)[!names(training) %in% outcomeName]
for(i in 1:length(BaseModels))
{
model <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
a <- predict(object=model, testing[,predictors])
testing <- cbind(testing,a,deparse.level = 1)
b <- predict(object=model, training[,predictors])
training <- cbind(training,b,deparse.level = 1)
}
predictors <- names(training)[!names(training) %in% outcomeName]
model_final <- train(training[,predictors], training[,outcomeName], method=TopModel, trControl=myControl)
#predictions<-predict(object=model_final, testing[,predictors])
str(training)
return(predictions)
}
p2<-ensemble(train,test,'Loan_Status',c('gbm','rpart','treebag'),c('gbm'))
train[,a[1]]<-1
train[,a[2]]<-1
View(train)
train[,a[13]]<-1
train[,"a[13]"]<-1
View(train)
train[,a[15]]<-1
View(train)
train[,a[16]]<-0
View(train)
train<-read.csv("train.csv",stringsAsFactors = T)
test<-read.csv("test.csv",stringsAsFactors = T)
test$Loan_ID<-NULL
train$Loan_ID<-NULL
ncol(test)
ensemble<-function(training,testing,outcomeName,BaseModels,TopModel,myControl = trainControl(method='cv',number=30,repeats=30,returnResamp='none'))
{
library('caret')
predictors <- names(training)[!names(training) %in% outcomeName]
for(i in 1:length(BaseModels))
{
model <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
#a<-ncol(testing)
testing[,(ncol(testing)+1)] <- predict(object=model, testing[,predictors])
training[,(ncol(training)+1)] <- predict(object=model, training[,predictors])
}
predictors <- names(training)[!names(training) %in% outcomeName]
model_final <- train(training[,predictors], training[,outcomeName], method=TopModel, trControl=myControl)
#predictions<-predict(object=model_final, testing[,predictors])
str(training)
return(predictions)
}
p2<-ensemble(train,test,'Loan_Status',c('gbm','rpart','treebag'),c('gbm'))
ensemble<-function(training,testing,outcomeName,BaseModels,TopModel,myControl = trainControl(method='cv',number=30,repeats=30,returnResamp='none'))
{
library('caret')
predictors <- names(training)[!names(training) %in% outcomeName]
for(i in 1:length(BaseModels))
{
model <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
#a<-ncol(testing)
testing[,(ncol(testing)+1)] <- predict(object=model, testing[,predictors])
training[,(ncol(training)+1)] <- predict(object=model, training[,predictors])
}
predictors <- names(training)[!names(training) %in% outcomeName]
model_final <- train(training[,predictors], training[,outcomeName], method=TopModel, trControl=myControl)
#predictions<-predict(object=model_final, testing[,predictors])
str(training)
str(testing)
return(predictions)
}
p2<-ensemble(train,test,'Loan_Status',c('gbm','rpart','treebag'),c('gbm'))
test$Loan_Status<-'?'
View(test)
ensemble<-function(training,testing,outcomeName,BaseModels,TopModel,myControl = trainControl(method='cv',number=30,repeats=30,returnResamp='none'))
{
library('caret')
predictors <- names(training)[!names(training) %in% outcomeName]
for(i in 1:length(BaseModels))
{
model <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
#a<-ncol(testing)
testing[,(ncol(testing)+1)] <- predict(object=model, testing[,predictors])
training[,(ncol(training)+1)] <- predict(object=model, training[,predictors])
}
predictors <- names(training)[!names(training) %in% outcomeName]
model_final <- train(training[,predictors], training[,outcomeName], method=TopModel, trControl=myControl)
predictions<-predict(object=model_final, testing[,predictors])
str(training)
str(testing)
return(predictions)
}
p2<-ensemble(train,test,'Loan_Status',c('gbm','rpart','treebag'),c('gbm'))
table(p2)
ensemble<-function(training,testing,outcomeName,BaseModels,TopModel,myControl = trainControl(method='cv',number=10,repeats=1,returnResamp='none'))
{
library('caret')
predictors <- names(training)[!names(training) %in% outcomeName]
for(i in 1:length(BaseModels))
{
model <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
#a<-ncol(testing)
testing[,(ncol(testing)+1)] <- predict(object=model, testing[,predictors])
training[,(ncol(training)+1)] <- predict(object=model, training[,predictors])
}
predictors <- names(training)[!names(training) %in% outcomeName]
model_final <- train(training[,predictors], training[,outcomeName], method=TopModel, trControl=myControl)
predictions<-predict(object=model_final, testing[,predictors])
#str(training)
#str(testing)
return(predictions)
}
p2<-ensemble(train,test,'Loan_Status',c('gbm','rpart','treebag'),c('gbm'))
table(p2)
p2<-ensemble(train,test,'Loan_Status',c('gbm','rf'),c('rpart'),trainControl(method='cv',number = 50,repeats = 5,returnResamp = 'none'))
p2<-ensemble(train,test,'Loan_Status',c('rpart','treebag'),c('gbm'),trainControl(method='cv',number = 50,repeats = 5,returnResamp = 'none'))
table(p2)
q()
?caret
??caret
?ggplot
?caret
??caret
install.packages('roxygen2')
rm(list=ls())
warnings()
install.packages('caret')
install.packages("caret")
detach(package:caret, unload = TRUE)
install.packages('caret')
install.packages("caret")
install.packages("Rtools")
library('Rtools')
install.packages('devtools')
devtools::load_all(".")
library('ensembleR')
library(tools)
library(Rtools)
data("WorldPhones")
topenv("WorldPhones")
summary(data("AirPassengers"))
str(data("AirPassengers"))
str(data("ChickWeight"))
library(ensembleR)
install.packages('lintr')
library('roxygen2')
library(ensembleR)
library(ensembleR)
quit()
dim(iris)
data("iris")
a<-data("iris")
a
data("iris")
str(data("iris"))
names(iris)
rm(list=ls())
data("iris")
names(iris)
rm(list=ls())
str(iris)
dim(iris)
ensemble<-function(training,testing,outcomeName,BaseModels,TopModel,myControl = trainControl(method='cv',number=10,repeats=1,returnResamp='none'))
{
predictors <- names(training)[!names(training) %in% outcomeName]
for(i in 1:length(BaseModels))
{
model <- train(training[,predictors], training[,outcomeName], method=BaseModels[i], trControl=myControl)
#a<-ncol(testing)
testing[,(ncol(testing)+1)] <- predict(object=model, testing[,predictors])
training[,(ncol(training)+1)] <- predict(object=model, training[,predictors])
}
predictors <- names(training)[!names(training) %in% outcomeName]
model_final <- train(training[,predictors], training[,outcomeName], method=TopModel, trControl=myControl)
predictions<-predict(object=model_final, testing[,predictors])
return(predictions)
}
dim(iris)
str(iris)
predictions<-ensemble(iris[1:100,],iris[100:150,],'Species',c('rpart','gbm','treebag'),'gbm')
library(caret)
predictions<-ensemble(iris[1:100,],iris[100:150,],'Species',c('rpart','gbm','treebag'),'gbm')
predictions<-ensemble(iris[1:125,],iris[125:150,],'Species',c('rpart','gbm','treebag'),'gbm')
table(predictions)
data("iris")
names("iris")
names(iris)
write.csv(iris,"iris")
iris<-read.csv("iris")
i<-read.csv("iris")
str(i
)
write.csv(iris,"iris.csv")
library(ensembleR)
library(ensembleR)
example("ensemble")
library(ensembleR)
example("ensemble")
?importIntoEnv
library(ensembleR)
library(ensembleR)
library(ensembleR)
library(ensembleR)
library(ensembleR)
library(ensembleR)
library(ensembleR)
install.packages(LaTex)
install.packages(LaTeX)
install.packages(;LaTeX')
install.packages('LaTeX')
predictions <- caret::predict(object=model_final, testing[,predictors])
predictions <- predict(object=model_final, testing[,predictors])
model_final <- caret::train(training[,predictors], training[,outcomeName], method=TopModel, trControl=myControl)
predictions <- caret::predict(object=model_final, testing[,predictors])
library(ensembleR)
library(ensembleR)
library(ensembleR)
install.packages("ipred")
install.packages("e1071")
library("e1071")
library("ipred")
library(caret)
library(ensembleR)
library(ensembleR)
example(ensembleR)
example(ensemble)
library(caret)
example(ensemble)
example(ensemble)
library(ensembleR)
example(ensemble)
library(ensembleR)
library(ensembleR)
example(ensemble)
library(ensembleR)
example(ensemble)
data("iris")
iris[1:50,]
iris[50:100,]
iris[100:150,]
library(ensembleR)
example(ensemble)
example(ensemble)
library(ensembleR)
library(ensembleR)
example(ensemble)
library(ensembleR)
install.packages("rpart")
install.packages("rpart")
library("rpart")
library(ensembleR)
library("rpart")
library(ensembleR)
library(ensembleR)
example(ensemble)
library(ensembleR)
library(ensembleR)
preds <- ensemble(iris[1:125,],iris[125:150,],'Species',c('treebag','gbm'),'rf')
preds <- ensemble(iris[1:125,],iris[125:150,],'Species',c('treebag','gbm'),'rpart')
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library(ensembleR)
??caret
library(caret)
names(caretFuncs)
names(caret)
names(caretGA)
names(caretSBF)
names(caretTheme())
namespaceExport(caretTheme())
namespaceExport(caret)
names(getModelInfo())
names(getModelInfo())
